
	/* ========================================================================
	 *  Java의 정석 3판 p.724 예제 13-1 : 쓰레드의 정의, 구현 및 실행
	 * ========================================================================
	 *
	 *   1. 프로세스와 쓰레드
	 *   
	 *    1) 프로세스
	 *    프로그램을 실행했을 때, OS로부터 할당받은 자원(CPU, 메모리...)과 쓰레드.
	 *    현재 실행시킨 프로그램을 의미한다.
	 *    
	 *    2) 쓰레드(thread)
	 *     - 실제로 프로세스의 자원을 이용하여, 작업을 수행하는 흐름, 작업의 단위.
	 *     - 모든 프로세스에는 최소 1개의 쓰레드가 존재함.
	 *     - 멀티쓰레드 프로세스 : 두 개 이상의 쓰레드를 가진 프로세스
	 *    
	 * ========================================================================
	 * 
	 *   2. 멀티 쓰레드의  장단점
	 *   
	 *     1) 장점
	 *       - CPU의 사용률을 향상시킴. (주어진 자원을 여러 쓰레드가 나눠서 동시에 작업하기 때문) 
	 *       - 자원을 효율적으로 사용할 수 있다.
	 *       - 사용자에 대한 응답성이 향상된다. (작업A를 수행하고 다른 작업 B를 수행하려면 그만큼의 시간이 더 소요됨.)
	 *       - 작업이 분리되어 코드가 간결해진다.
	 *     
	 *     2) 단점
	 *       - 동기화(Synchronization) : 자원을 공유하는 것에서 오는 충돌문제
	 *       - 교착상태(deadlock) : 동일 자원을 두개 이상의 쓰레드가 사용하는 상황에서, 다른 쓰레드가 사용중인 쓰레드를 기다리는 과정에서 생기는 정지 상태)
	 *       - 기아상태 : 각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야함.
	 *       - 이런 점에서 고려할 점이 많다.
	 *       
	 * ========================================================================
	 *   
	 *   3. 쓰레드의 구현
	 *    
	 *     1) Thread 클래스를 상속받아, 구현한 뒤 객체를 생성함.
	 *        - 단점 : 상속을 받기 떄문에 다른 클래스를 상속받을 수 없음 
	 *        
	 *      class Thread1 extends Thread{
	 *        @Override
	 *        public void run() {
	 *           // 실행 내용
	 *        }
	 *       
	 *      실사용 : Thread t1 = new Thread1();
	 *             t1.start();
	 *        
	 *     2) Runnable 인터페이스을 구현하고, 이 구현체를 기반으로 한 Thread 객체 생성하기
	 *       
	 *       class Thread2 implements Runnable {
	 *        
	 *        @Override
	 *         public void run() {
	 *           // 실행 내용
	 *         }
	 *       }
	 *       
	 *       실사용 : Runnable r = new Thread2();
	 *              Thread t2 = new Thread(r); // Thread 객체 생성
	 *              t2.start();
	 *         
	 * ========================================================================
	 *    
	 *   4. Thread 클래스의 메서드
	 *   
	 *     void start() : 쓰레드를 실행가능상태로 만듬. 
	 *     void run() : 쓰레드에서 수행될 작업 
	 *     String getName() : 쓰레드의 이름을 반환
	 *     static Thread currentThread() : 현재 실행 중인 쓰레드의 참조를 반환
	 * 
	 * ========================================================================
	 * 
	 *   4. 쓰레드의 실행
	 *     Thread 클래스는 start() 메서드를 가지고 있음.
	 *     이 메서드를 실행했을 때 run() 메서드에 정의된 작업이 '실행 가능 상태'가 된다.
	 *     
	 *     - 주의점
	 *        * start() 메서드는 쓰레드를 실행 가능한 상태로 만들 뿐 바로 실행을 시키지 않음.
	 *        * 여러 쓰레드 객체가 start() 메서드를 실행했을 때, 순차적으로 실행되는 것이 아님.
	 *        * 멀티 쓰레드 프로세스 상의 쓰레드들의 실행순서는 OS가 정해둔 스케쥴러에 의해 결정됨.
	 *     
	 * ========================================================================
	 */


public class ThreadEx1 {

	public static void main(String[] args) {
		ThreadEx1_1 th1 = new ThreadEx1_1();

		Runnable r = new ThreadEx1_2(); // Runnable 구현체를 통해
		Thread th2 = new Thread(r); // 쓰레드 객체 반환 
		//Thread th2 = new Thread(new ThreadEx1_2());
		
		th1.start(); // 실행 가능한 상태가 될 뿐,  작업 순서는 코드 순서대로 진행되는 것이 아님. OS의 스케쥴러에 의해 순서가 결정됨 
		th2.start();
	}

}

class ThreadEx1_1 extends Thread { // Thread 클래스를 상속받아, 쓰레드를 구현
	@Override
	public void run() {
		for(int i=0; i<1000; i++) {
			System.out.print(getName()); // 조상인 Thread 클래스로부터 상속받은 getName() 메서드를 호출
		}
	}
}

class ThreadEx1_2 implements Runnable { // Runnable 인터페이스를 구현하여 쓰레드를 구현
	@Override
	public void run() {
		for (int i=0; i<1000; i++) {
			System.out.print(Thread.currentThread().getName()); // 현재 실행 중인 Thread를 반환받아, getName()을 호출
		}
	}
}